
#ifndef SERVER_2_H
#define SERVER_2_H

#include <vector>
#include <gmpxx.h>
#include <stdlib.h>
#include <chrono>
#include <thread>
#include <fstream>
#include <iostream>

#include "pair.h"
#include "paillier.h"





class Server_Two
{
    public:
        Server_Two(){}
        
        //  Constucts an instance of "Server_Two" capable of performing the actions
        //  needed to compute distibuted histogram intersection
        //  Pre:    "public_k" and "private_k" must be corresponding public/private key
        //              pair.
        //          "max_rand_size" is the maximum possible value based on the encryption key size
        //              used. i.e if the key is 1024-bits, the value is 2^1024;  
        //          "num_entry" should be the number of entries in the base and test files that
        //              contain concatenated bins. The ID/timestamp entry is EXCLUDED from this count
        Server_Two(const Paillier_Public_Key& public_k, 
                   const Paillier_Private_Key& private_k, const mpz_class max_rand,
                   const int num_entry):
                   m_decryptor(public_k,private_k),m_result_sum(0),
                   m_max_rand(max_rand), m_num_entry(num_entry){}
        ~Server_Two(){}
        
        //  Function to process values generated by "Server_One::step_one()"(server1.h)
        //      and create a file for input into a garbled circuit
        //  Pre:    "Server_One::step_one()" needs to have already run using the same
        //          "filename" used here.
        //  Post:   The values in the file named by "filename" will be decrypted and
        //          written as garbled circuit input to the file "server".
        void step_one(const std::string filename="server2input");
        
        //  Function that can decrypt the ith pair of randomized entries and write
        //  them to a circuit input file. Used by "step_one(string)"
        //  Pre:    "i" should be between 0 inclusive and the number of entries exclusive
        //  Post:   The decrypted version of the ith randomized entry pair is written to
        //          the circuit input file "server"
        void step_one_i(const int& i, const Pair& bt_pair_r);
        
        //  The following are outdated ID/timestamp functions.
        /*
        void step_one_id(const Pair& id_pair_r);
        
        void step_one_time(const mpz_class time_test_r);
        */
        
        //  Runs the garbled circuit and processes the result
        //  Pre:    The garbled circuit input files "server" and "client" must be properly
        //          written to match the circuit file "circuit.cir"
        //  Post:   The circuit is evaluated and the result is returned
        mpz_class step_two();
        
        // Outdated function no longer used. Was realted to Server_One::step_two()
        /*
        mpz_class step_three(const mpz_class& base_r_e);
        */
    private:
        Paillier m_decryptor;
        mpz_class m_result_sum;
        mpz_class m_max_rand;
        int m_num_entry;
};



#endif